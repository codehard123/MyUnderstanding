Compilation process phases:-

Broad Definition :- Compiler is a program that convert a code from a high level language to a lowlevel (machine code) language
Types of Cmpiler :-
Single Pass Compiler :- Goes through the program single time
Multi pass compiler :- Goes through program multiple times

Phases of comilation:-
Two phases Syntheis phase and analysis phase :-

analysis phase:- From source program to intermediate code generation

Synthesis phase:- From Intemediate code generation to a target programm

More Specific - Compiler converts the program from modified source program

Cousins of a compiler(indicated by &) :-
Source program----- written in high level language. Removes
&Preprocessor ------- handles preprocessor directive and does macro expansion... Also does target program generation

The output of preprocessor is modified source program which moves into the Compiler

&Compiler:--------- Compiler converts code from modified source program to assembly code...

&Assembler :- Assembly Code-> Relocatable Machine code(which does not have any memory address)

&(Loader/Linker)----- Loader takes the program(in all its entirety) and takes it into memory for execution(ie loads relocatable machine code into main memory) and Linker---- all other libraries are linked together with the program.....

Lexical ANalyzer
& Lexical Analyzer:- Extracts token from the code . Removes whitespaces and does micro expansion and file inclusion

& Syntax analyzer :- Verifies syntactically

& Semantic Analyzer :- Finds whether the given

Symbol Table Manager:-- Stores tokens and attributes. Scans and enters tokens into symbol table.
Error Handler:- Does error handlng and if cannot handle --- terminate compilation process

Phases of a compiler-
...................Analysis Phase....................

1. Lexical Analysis ---- Generates tokens/lexemes ... Removes whitespaces and comments also does file inclusion
   Lex tools --- Used for tokenization

2. Syntax analyzer:- Code follows syntax or not... Generates parse trees for validation

3. Semantic Analyzer:- Meaning correct or not(semantic verification) used parse trees to check if statement is meaningful or not

4. Intermediate COde Generation:- 3 address code ie at max 3 operands will be used.......to show elementary operations

---------------------Synthesis Phase------------

5. Code Optimization:- Remove unreachable code
6.

..............Synthesis Phase/...................

1. Lexical Analysis(LA) ---- Generates tokens/lexemes ... Removes whitespaces and comments also does file inclusion
   Lex tools --- Used for tokenization and
   Lexical analysis uses scanning to generate tokens
   LA:- removes comments
   Lexical analyzer and parser collaborate with symbol table
   Displays lexical errors if any and also provides spell -check and transposing..

Look ahead:- for the case of (>=) we need to push the extra read character back into the input stream and then move on:-
For example if(a>=3) now we push a and then we move on with popping a

2. Lexical analyzer reads a charactracter and estokens

Syntax(Parser) ANalysis :- Refers to the structure of avalid programs. Make parse trees
Verify a stream of token is valid or not ... Syntatic errors are reported and reaining program is processed. The representation of parses trees is generated by strea of tokens ...
Type CHecking --- Ruled
